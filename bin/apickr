#!/usr/bin/env perl

=head1 NAME

apickr - Synchronize aperture library and flickr account.

=head1 SYNOPSIS

apickr [OPTIONS] COMMAND PATH

Synchronize aperture library given by PATH with flickr.

=head1 COMMANDS

  albums              list albums
  images              list images
  flickr              sync with flickr
  flickr-fix          fix flickr dates from exif
  flickr-albums       list flickr albums
  flickr-images       list flickr images in a format suitable for flickr-set
  flickr-backup PATH  backup metadata for selected images to PATH
  flickr-restore PATH restore metadata for selected images from PATH

=head1 OPTIONS

 --help|-h      brief help message
 --num|-n=NUM   only process NUM items
 --album|-a=STR only process Albums which contain STR
 --verbose|-v   output verbose information
 --dry-run      only output changes to flickr data

=head1 AUTHOR

 Nathan Gass <gass@search.ch>

=cut

use Modern::Perl;
use autodie;

use Getopt::Long qw/:config/;
use Pod::Usage;
use YAML qw/LoadFile DumpFile Load Dump/;
use DBI;
use Flickr::API2;
use File::Spec::Functions qw/splitpath catdir/;
use Browser::Open qw/open_browser/;
use List::AllUtils qw/first max min/;
use Encode qw/encode_utf8 decode_utf8 encode decode/;
use Encode::Locale;
use DateTime;
use DateTime::Format::Strptime;
use DateTime::Format::Epoch;
use Carp qw/confess/;
use String::ProgressBar;
use File::Slurp;

my @podargs = (-verbose => 99, -sections => [qw/NAME SYNOPSIS COMMANDS OPTIONS/]);
my $config = {};
eval {
	$config = LoadFile(catdir($ENV{HOME}, '.apickrrc'));
};
my $opts = {};
GetOptions(
	$opts,
	'help|h', 'num|n=i', 'album|a=s', 'verbose|v', 'dry-run',
	) or pod2usage(-exitval => 2, @podargs);
pod2usage(@podargs) if $opts->{help};
$config = {%$config, %$opts};

my $command = shift() || "albums";
my $path;
if (!$command =~ /^flickr-/) {
	$path = shift() || catdir($ENV{HOME}, 'Pictures', '2 Sterne.aplibrary');
}

given ($command) {
	when ("albums") {
		display(aperture_select(
			"RKFolder.name AS album,COUNT(DISTINCT COALESCE(RKVersion.stackUuid,RKVersion.uuid)) AS stacks,COUNT(DISTINCT RKVersion.uuid) AS images",
			"GROUP BY RKVersion.projectUuid"
		));
	}
	when ("images") {
		display(aperture_select(
			"RKVersion.uuid,RKFolder.name AS album,RKVersion.name,imagePath,mainRating,versionNumber,RkVersion.imageDate"
		));
	}
	when ("flickr") {
	}
	when ("flickr-backup") {
		my $path = shift() or die "No path for backup file given!\n";
		die "Will not overwrite existing file $path!\n" if -e $path;
		open my $file, ">", $path;
		$file->print(encode_utf8(Dump($opts)));
		my $photos = with_progressbar(flickr_images(extras => ''));
		while (my $photo = $photos->()) {
			my $info = flickr_api('photos.getInfo', photo_id => $photo->{id});
			$file->print(encode_utf8(Dump({%$photo, %$info})));
		}
		$file->close();
	}
	when ("flickr-restore") {
		my %byid;
		my $path = shift() or die "No path for backup file given!\n";
		my @recs = split(/---/, read_file($path));
		shift @recs;
		$opts = {%$opts, %{Load(shift @recs)}};
		foreach my $rec (@recs) {
			my $new = Load($rec);
			$byid{$new->{id}} = $new;
		}
		my %rawtags;
		my $result = flickr_api('tags.getListUserRaw');
		foreach my $tag (@{$result->{tags}}) {
			my $raw = $tag->{raw}[0];
			$rawtags{$tag->{clean}} = $raw =~ /\s/ ? "\"$raw\"" : $raw;
		}
		my $photos = with_progressbar(flickr_images());
		while (my $photo = $photos->()) {
			if (my $old = $byid{$photo->{id}}) {
				my $info = flickr_api('photos.getInfo', photo_id => $photo->{id});
				if ($old->{title} ne $info->{title} || $old->{description} ne $info->{description}) {
					flickr_api('photos.setMeta', photo_id => $photo->{id}, title => $old->{title}, description => $old->{description});
				}
				if (join(" ", @{$old->{tags}}) ne join(" ", @{$info->{tags}})) {
					my $tagstring = join(" ", map {$rawtags{$_} || $_} @{$old->{tags}});
					flickr_api('photos.setTags', photo_id => $photo->{id}, tags => $tagstring);
				}
				my $update;
				foreach my $key (qw/isfamily isfriend ispublic/) {
					$update = 1 if ($old->{visibility}{$key} ne $info->{visibility}{$key});
				}
				foreach my $key (qw/permaddmeta permcomment/) {
					$update = 1 if ($old->{permissions}{$key} ne $info->{permissions}{$key});
				}
				if ($update) {
					flickr_api('photos.setPerms', photo_id => $photo->{id}, is_public => $old->{visibility}{ispublic}, is_friend => $old->{visibility}{isfriend}, is_family => $old->{visibility}{isfamily}, perm_comment => $old->{permissions}{permcomment}, perm_addmeta => $old->{permissions}{permaddmeta});
				}
				if ($old->{safety_level} != $info->{safety_level}) {
					flickr_api('photos.setSafetyLevel', photo_id => $photo->{id}, safety_level => $old->{safety_level} + 1);
				}
			}
		}
	}
	when ("flickr-fix") {
		my $ickr = with_progressbar(flickr_add_exif(flickr_images()));
		my $photo;
		while ($photo = $ickr->()) {
			my %update;
			my $exif = datetime_exif($photo->{exif}{DateTimeOriginal}{raw});
			if (abs(($exif - $photo->{datetaken})->in_units('seconds')) > 1) {
				$update{date_taken} = "" . $exif;
			}
			if ($update{date_taken} && $photo->{dateupload} != $exif
				|| $photo->{dateupload} != $photo->{datetaken}) {
				$update{date_posted} = $update{date_taken} ? $exif->epoch : $photo->{datetaken}->epoch;
			}
			if (%update) {
				flickr_api(
					'photos.setDates',
					photo_id => $photo->{id},
					%update,
				);
			}
		}
	}
	when ("flickr-albums") {
		display(
			filter_keys(
				qr/id|title|photos|count_views|count_comments/,
				flickr_albums()
			),
		);
	}
	when ("flickr-images") {
		display(
			filter_keys(
				qr/title|album|datetaken\b|tags|views|sets/,
				flickr_images()
			)
		)
	}
	default {die "Unknown command $_"}
};

exit;

sub flickr_auth {
	my $api = shift;
	my $auth = {};
	my $authpath = catdir($ENV{HOME}, '.apickr.auth');
	if (-e $authpath) {
		$auth = LoadFile($authpath);
	}
	if (!$auth->{token}) {
		my $frob = flickr_api('auth.getFrob', api_key => $api->raw->{api_key});
		my $url = $api->raw->request_auth_url('write', $frob);
		open_browser($url);
		say "Please authorize apickr to read and write to your flickr account.";
		say "Press any key to continue.";
		local $| = 0;
		getc;
		$auth = flickr_api('auth.getToken', frob => $frob);
		DumpFile($authpath, $auth);
	}
	return $auth;
}

sub flickr_api {
	state $api = Flickr::API2->new({key => '04c25240b84f6f5d32e8e43fd4deb249', secret => 'abef06bf4946a4a2'});
	state $auth = flickr_auth($api);
	my $method = shift;
	my $params = {@_};
	$params->{auth_token} = $auth->{token}
		if $auth;
	my $req;
	if ($opts->{'dry-run'} && $method =~ /\.set/) {
		print 'flickr.' . $method, "\n", Dump($params), "\n";
		return undef;
	} else {
		eval {
			$req = $api->execute_method('flickr.' . $method, $params);
		};
		if ($@ && (!$params->{page} || $params->{page} == 1)) {
			confess $@
		}
		if ($req && $req->{stat} eq 'ok') {
			delete $req->{stat};
			if (%$req) {
				my ($first) = keys %$req;
				return simplify_flickr_response($req->{$first});
			}
		}
		return undef;
	}
}

sub simplify_flickr_response {
	my ($r, $inkey) = @_;
	my $singular = $1 if $inkey && $inkey =~ /^(\w+)s$/;
	given (ref $r) {
		when ('HASH') {
			if (exists $r->{_content}) {
				return decode_utf8($r->{_content});
			} elsif ($singular && keys %{$r} == 1 && defined($r->{$singular})) {
				return simplify_flickr_response($r->{$singular});
			} else {
				return { map {$_ => simplify_flickr_response($r->{$_}, $_)} keys %$r };
			}
		}
		when ('ARRAY') {
			return [map {simplify_flickr_response($_)} @$r];
		}
		default {
			return decode_utf8($r);
		}
	}
}

sub flickr_select {
	my ($method, $args, $select) = @_;
	my ($resp, $page, $key, $i);
	my $num = 1;
	$args->{per_page} = $opts->{num} ? min(500, $opts->{num} * 10) : 500;
	return sub {
		if (!$i || $i == @{$resp->{$key}}) {
			return undef if $key && @{$resp->{$key}} < 500;
			$args->{page} = ++$page;
			$resp = flickr_api($method, %$args);
			return undef unless $resp;
			$key = first {ref($resp->{$_}) eq 'ARRAY'} keys %$resp;
			return undef unless $key && @{$resp->{$key}};
			$i = 0;
		}
		my $res = $resp->{$key}[$i++];
		foreach my $k (keys %$res) {
			$res->{$k} = datetime_flickr($res->{$k}) if $k =~ /date/ && $k !~ 'granularity';
		}
		$res->{total} = $resp->{total};
		$res->{num} = $num++;
		return $res;
	}
}

sub aperture_select {
	my ($select, $add) = @_;
	$add = "" unless $add;
	my $dbpath = catdir($path, 'Database', 'Library.apdb');
	my $dbh = DBI->connect("dbi:SQLite:dbname=$dbpath","", "", { RaiseError => 1, AutoCommit => 0, ReadOnly => 1});
	my $sth = $dbh->prepare(
		"Select $select FROM RKVersion"
		. " JOIN RKFolder ON RKFolder.uuid = RKVersion.projectUuid"
		. " JOIN RKMaster ON RKVersion.masterUuid = RKMaster.uuid"
		. " WHERE RKVersion.isInTrash = 0 AND RKVersion.versionNumber > 0 AND RKFolder.folderType = 2 "
		. ($opts->{album} ? "AND RKFolder.name LIKE ? " : '')
		. $add
		);
	$sth->bind_param(1, '%' . $opts->{album} . '%') if $opts->{album};
	$sth->execute();

	return sub {
		my $row = $sth->fetchrow_hashref;
		if ($row && $row->{imagePath}) {
			my ($d,$dir,$name) = splitpath($row->{imagePath});
			my $prev = catdir($path, 'Previews', $dir, $row->{uuid}, $row->{name} . ".jpg");
			$row->{path} = -e $prev ? $prev : catdir($path, 'Masters', $row->{imagePath});
		}
		if ($row && $row->{imageDate}) {
			$row->{imageDate} = datetime_aperture($row->{imageDate});
		}
		$dbh->disconnect unless $row;
		return $row;
	}
}

sub datetime_aperture {
	state $formatter = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');
	state $macepoch  = DateTime::Format::Epoch->new(
		epoch => DateTime->new(year => 2001, month => 1, day => 1),
		);
	my ($val) = @_;
	my $res = $macepoch->parse_datetime(shift) or die "Could not parse aperture date $val";
	$res->set_formatter($formatter);
	return $res;
}

sub datetime_exif {
	state $formatter = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');
	state $parser = DateTime::Format::Strptime->new(pattern => '%Y:%m:%d %H:%M:%S');
	my ($val) = @_;
	my $res = $parser->parse_datetime($val) or die "Could not parse exif date $val";
	$res->set_formatter($formatter);
	return $res;
}

sub datetime_flickr {
	state $formatter = DateTime::Format::Strptime->new(pattern => '%Y-%m-%d %H:%M:%S');
	my ($val) = @_;
	my $res;
	if ($val =~ /^\d+$/) {
		$res = DateTime->from_epoch(epoch => $val);
	} else {
		($res = $formatter->parse_datetime($val)) or die "Could not parse flickr date $val";
	}
	$res->set_formatter($formatter);
	return $res;
}

sub filter_keys {
	my ($select, $gen) = @_;
	return $gen if ($opts->{verbose});
	return sub {
		my $row = $gen->();
		return $row ? {map {$_ ~~ $select ? ($_ => $row->{$_}) : ()} keys %$row} : undef;
	}
}

sub add_keys {
	my ($keys, $gen) = @_;
	return sub {
		my $row = $gen->();
		return undef unless $row;
		$row->{$_} = $keys->{$_} foreach keys %$keys;
		return $row;
	}
}

sub flickr_albums {
	my $album = $opts->{album};
	my $all = flickr_select('photosets.getList', {});
	return sub {
		my $row;
		while ($row = $all->()) {
			return $row if (!$album || $row->{title} =~ /\Q$album\E/i);
		}
		return undef;
	}
}

sub with_progressbar {
	my ($gen) = @_;
	my $bar;
	$| = 1;
	return sub {
		my $val = $gen->();
		unless (defined $val) {
			print "\n";
			return undef;
		}
		unless ($bar) {
			$bar = String::ProgressBar->new(max => $val->{total}, length => 40);
		}
		$bar->text(encode(locale => $val->{album}) . ":\t") if $opts->{album} && $val->{album};
		$bar->update($val->{num});
		$bar->info(encode(locale => $val->{title})) if $val->{title};
		$bar->write;
		return $val;
	}
}

sub flickr_images {
	my @args = @_;
	if ($opts->{album}) {
		my $sets = flickr_albums();
		my ($photos, $set);
		return sub {
			while(1) {
				return undef unless $set || ($set = $sets->());
				if (!$photos) {
					$photos = add_keys(
						{album => $set->{title}},
						flickr_select(
							'photosets.getPhotos',
							{photoset_id => $set->{id}, extras => 'date_taken,date_upload,tags,view', @args}
						)
						);
				}
				my $photo = $photos->();
				return $photo if $photo;
				$set = undef;
			}
		}
	} else {
		return flickr_select(
			'people.getPhotos',
			{user_id => 'me', sort => 'date-taken-asc', extras => 'date_taken,date_upload,tags,views', @args},
		);
	}
}

sub flickr_add_exif {
	my ($gen) = @_;
	return sub {
		my $photo = $gen->();
		return undef unless $photo;
		my $exif = flickr_api('photos.getExif', photo_id => $photo->{id});
		$photo->{exif}{camera} = $exif->{camera};
		foreach my $tag (@{$exif->{exif}}) {
			$photo->{exif}{$tag->{tag}} = $tag;
		}
		return $photo;
	}
}

sub display {
	state $num = 0;
	my ($gen) = @_;
	my ($row, $n);
	say d($row) while ($row = $gen->()) && (!$opts->{num} || $n++ < $opts->{num});
}

sub d {
	my ($row) = @_;
	return Dump(encode_rec($row));
}

sub encode_rec {
	my ($in) = @_;
	given (ref $in) {
		when ('HASH')  { return {map {$_ => encode_rec($in->{$_})} keys %$in} };
		when ('ARRAY') { return [map {encode_rec($_)} @$in] };
		default        { return $in ? encode(locale => $in) : $in }
	}
}

